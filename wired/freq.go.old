package mods

import (
	"errors"
	"fmt"
	"os/exec"
	"strings"

	logg "github.com/kercre123/wire-os/wired/logger"
	"github.com/kercre123/wire-os/wired/vars"
)

var FreqChange = vars.Modification{
	Name:            "FreqChange",
	Description:     "Changes the CPU and RAM frequency",
	HasInitFunction: true,
	Options: []vars.Option{
		{
			Name:        "Mode",
			Type:        "int",
			Description: "0 for regular, 1 for balanced, 2 for performance",
			Validator:   FreqChange_Validate,
		},
	},
	Apply: func(opts []vars.Option) error {
		// Apply the modification here
		// Extract the value from the first Option
		value := opts[0].Value.(int)
		// Apply the change based on the value
		// Your code here
		return nil
	},
}

func FreqChange_Validate(v any) error {
	// Validate the option here
	value, ok := v.(int)
	if !ok || value < 0 || value > 2 {
		return fmt.Errorf("invalid mode value")
	}
	return nil
}

func RunCmd(cmd string) ([]byte, error) {
	logg.PLLDebug("Running command: " + cmd)
	out, err := exec.Command("/bin/bash", "-c", cmd).Output()
	logg.PLLDebug(strings.TrimSpace(string(out)))
	logg.PLLDebug(err)
	return out, err
}

func FreqChange_Do(freq int) error {
	if freq < 0 || freq > 2 {
		return errors.New("freq must be between 0 and 2")
	}
	var cpufreq string
	var ramfreq string
	var gov string
	switch {
	case freq == 0:
		cpufreq = "533333"
		ramfreq = "400000"
		gov = "interactive"
	case freq == 1:
		cpufreq = "733333"
		ramfreq = "600000"
		gov = "ondemand"
	case freq == 2:
		cpufreq = "1267200"
		ramfreq = "800000"
		gov = "performance"
	}
	RunCmd("echo " + cpufreq + " > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq")
	RunCmd("echo disabled > /sys/kernel/debug/msm_otg/bus_voting")
	RunCmd("echo 0 > /sys/kernel/debug/msm-bus-dbg/shell-client/update_request")
	RunCmd("echo 1 > /sys/kernel/debug/msm-bus-dbg/shell-client/mas")
	RunCmd("echo 512 > /sys/kernel/debug/msm-bus-dbg/shell-client/slv")
	RunCmd("echo 0 > /sys/kernel/debug/msm-bus-dbg/shell-client/ab")
	RunCmd("echo active clk2 0 1 max " + ramfreq + " > /sys/kernel/debug/rpm_send_msg/message")
	RunCmd("echo " + gov + " > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor")
	RunCmd("echo 1 > /sys/kernel/debug/msm-bus-dbg/shell-client/update_request")
	return nil
}
